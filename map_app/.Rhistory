shiny::runApp()
install.packages("zoo")
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(zoo)
library(jsonlite)
library(leaflet)
library(shiny)
library(RColorBrewer)
# --- Read in the data and prepare the dataframe ---
# read in the data
tourist_data = read.csv("px.hotelnights.csv", header=TRUE, sep=",", na.strings="..")
# filter out the unnecessary rows where Mánuður = "Allir"
tourist_data <- tourist_data[tourist_data$Mánuður != "Allir",]
# change the month names to english
month_names_isl <- c("janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí",
"ágúst", "september", "október", "nóvember", "desember")
month_names_en <- c("January", "February", "March", "April", "May", "June", "July",
"August", "September", "October", "November", "December")
translate <- function(from_lang, to_lang){
function(from_name){
return (to_lang[match(tolower(from_name), from_lang)])
}
}
# returns a function to translate between two languages
month_names_to_en <- translate(month_names_isl, month_names_en)
# append combined year/month column to the right
tourist_data <- cbind(Dagsetning = as.yearmon(
paste(
tourist_data$Ár,
month_names_to_en(tourist_data$Mánuður),
sep = ","),
format = "%Y,%B"),
tourist_data)
# remove the unnecessary "Ár" and "Mánuður" columns
tourist_data[c("Ár", "Mánuður")] <- list(NULL)
# rename the headers to english
names(tourist_data)[names(tourist_data) == 'Dagsetning'] <- 'Date'
names(tourist_data)[names(tourist_data) == 'Þjóðerni'] <- 'Nationality'
names(tourist_data)[names(tourist_data) == 'Landsvæði'] <- 'Region'
names(tourist_data)[names(tourist_data) == 'Value0'] <- 'Number'
# order by date
tourist_data <- tourist_data[order(tourist_data$Date),]
get_palette <- function(data){
colorNumeric("Greens",domain=data$Log)
}
# --- Processing ---
# add logarithm of number of tourists
tourist_data$Log <- log(tourist_data$Number)
# List of nationalities
nationalities <- unique(tourist_data$Nationality)
# List of time values
time_range <- unique(tourist_data$Date)
time_min <- tourist_data$Date[[1]]
time_max <- tail(tourist_data$Date, 1)
# --- Preparing for shiny ---
# read in the geoJSON file
geoData <- readLines("iceland-geodata/regions/1000/iceland_regions.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
# Default styles for all features
geoData$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
# Shiny processing, we specify the UI and the server.
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:90%;height:90%}"),
leafletOutput("my_map", width = "90%", height = "90%"),
absolutePanel(top = 10, right = 10,
sliderInput(inputId="time", label="Time", min = 1, max = length(time_range), value=1, step=1),
selectInput(inputId="nat", label="Nationality",choices= as.character(nationalities)),
selectInput("colors", "Color Scheme",rownames(subset(brewer.pal.info, category %in% c("seq", "div")))),
checkboxInput("legend", "Show legend", TRUE)
)
)
X <- lapply(tourist_data, function(touristDensity){
touristDensity <- tourist_data[(tourist_data$Nationality == input$nat) & (tourist_data$Date == time_range[[input$time]]),]
})
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:90%;height:90%}"),
leafletOutput("my_map", width = "90%", height = "90%"),
absolutePanel(top = 10, right = 10,
sliderInput(inputId="time", label="Time", min = 1, max = length(time_range), value=1, step=1),
selectInput(inputId="nat", label="Nationality",choices= as.character(nationalities)),
selectInput("colors", "Color Scheme",rownames(subset(brewer.pal.info, category %in% c("seq", "div")))),
checkboxInput("legend", "Show legend", TRUE)
)
)
X <- lapply(tourist_data, function(touristDensity){
touristDensity <- tourist_data[(tourist_data$Nationality == input$nat) & (tourist_data$Date == time_range[[input$time]]),]
})
server <- function(input, output) {
X <- lapply(tourist_data, function(touristDensity){
touristDensity <- tourist_data[(tourist_data$Nationality == input$nat) & (tourist_data$Date == time_range[[input$time]]),]
})
}
X
shiny::runApp()
X <- lapply(tourist_data, function(touristDensity){
touristDensity <- tourist_data[(tourist_data$Nationality == "Japan") & (tourist_data$Date == "Apr 2015"),]
})
X
typeof(X)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
inputData()
inputData
inputData$Region
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
XData()
XData$Region
shiny::runApp()
XData
XData()
X = XData()
X
X$Region
shiny::runApp()
shiny::runApp()
shiny::runApp()
XData()
XData$Region
XData = XData()
XData$Region
shiny::runApp()
shiny::runApp()
region_name
XData
XData$Region
XData$Region[(XData$Region$Region == region_name),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
densityValue
densityValue$Log
colorPal(densityValue$Log)
colorNumeric(input$colors,densityValue$Log)
~colorNumeric(input$colors,densityValue$Log)
shiny::runApp()
geoData
names(geoData)
names(geoData$features)
geoData$features
geoData$style
geoData$crs
geoData$type
geoData$features[[1]]
geoData$features[[1]]$geometry
geoData$features[[1]]$geometry$coordinates
geoData$features[[1]]$geometry$coordinates[[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[2]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[2]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[3]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[4]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[5]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[0]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[2]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[2]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[2]][[2]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[2]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[3]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[2]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][1]
geoData$features[[1]]$geometry$coordinates[[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][1]
geoData$features[[1]]$geometry$coordinates[[1]][[1]]
typeof(geoData)
typeof(geoData$features)
typeof(geoData$features[[1]])
typeof(geoData$features[[1]]$geometry)
geoData
leaflet() %>% addGeoJSON(geoData)
geoData$features[[1]]$geometry$coordinates[[1]][[1]]
X = geoData$features[[1]]$geometry$coordinates[[1]][[1]]
X
X = geoData$features[[1]]
head(X)
leaflet() %>% addPolygons(geoData)
leaflet() %>% addPolygons(data = geoData)
leaflet() %>% addPolygons(data = "iceland-geodata/regions/1000/iceland_regions.geojson")
leaflet() %>% addPolygons(data = geoData$features[[1]]$geometry$coordinates)
leaflet() %>% addGeoJSON(geoData)
library(sp)
geoData$features[[1]]$geometry$coordinates
Sr1 = Polygon(geoData$features[[1]]$geometry$coordinates)
Sr1 = Polygon(geoData$features[[1]]$geometry$coordinates[[1]][[1]])
Sr1 = Polygon(geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]])
Sr1 = Polygon(geoData$features[[1]]$geometry$coordinates[[1]][[1]])
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][[1]]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][[1]][]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][]
SR = Polygon(geoData$features[[1]]$geometry$coordinates[[1]][[1]][][])
length(geoData$features[[1]]$geometry$coordinates[[1]][[1]][][])
length(geoData$features[[1]]$geometry$coordinates[[1]][[2]][][])
length(geoData$features[[1]]$geometry$coordinates[[1]][[1]][][])
length(geoData$features[[1]]$geometry$coordinates[[2]][[1]][][])
length(geoData$features[[1]]$geometry$coordinates[[3]][[1]][][])
length(geoData$features[[2]]$geometry$coordinates[[1]][[1]][][])
length(geoData$features[[1]]$geometry$coordinates[[1]][[1]][][])
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][1:4]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][][1]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][1][]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][1,][]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][1,]
geoData$features[[1]]$geometry$coordinates[[1]][[1]][1][1]
A = cbind(c(1:4),c(1:4))
A
A[1,1]
A[1,2]
for i in 1:4:
for(i in 1:4){
for(j in 1:4){
A[i,j] = geoData$features[[1]]$geometry$coordinates[[1]][[1]][i][j]
}
}
geoData$features[[1]]$geometry$type
geoData$features[[1]]$geometry
leaflet() %>% addPolygons(data = geoData$features[[1]]$geometry)
leaflet() %>% addPolygons(data = geoData$features[[1]]$geometry$coordinates)
leaflet() %>% addPolygons(data = geoData$features[[1]]$geometry[])
typeof(geoData$features[[1]]$geometry)
typeof(geoData$features[[1]]$geometry$coordinates)
shiny::runApp()
shiny::runApp()
